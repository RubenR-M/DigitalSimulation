import numpy as np
from math import log
import scipy.stats as stat2


def normal(paremetrer=[], bins=[]):
    """
    > The function `normal` takes in a list of parameters and a list of bins, and returns the cumulative
    distribution function of the normal distribution with the given parameters evaluated at the given
    bins

    :param paremetrer: a list of parameters for the distribution
    :param bins: The bins to use for the histogram
    :return: The cumulative distribution function for the normal distribution.
    """
    return stat2.norm.cdf(bins)


def EXPONENTIAL(lmbda, bins):
    """
    > The function takes in a lambda value and a set of bins, and returns the probability of observing a
    value in each bin

    :param lmbda: the rate parameter of the exponential distribution
    :param bins: the x-axis of the histogram
    :return: The probability of a random variable being less than or equal to a certain value.
    """
    return 1 - np.exp(-lmbda[0]*bins)


def generateObservedExpectedValues(generatedValues, functionName, functionParameters=[]):
    """
    It takes a list of generated values, a function name, and a list of parameters for that function,
    and returns the observed values, expected values, and number of groups

    :param generatedValues: the values generated by the random number generator
    :param functionName: the name of the function that generates the random numbers
    :param functionParameters: the parameters of the distribution function
    :return: the observed values, expected values, and the number of groups.
    """

    numGroups = round(1 + log(len(generatedValues))/log(2))
    maxValue = max(generatedValues)

    observedValues, bins = np.histogram(generatedValues, bins=numGroups)
    # print(numGroups, observedValues, bins)

    probs = functionName(functionParameters, bins)
    probsExp = []

    for i in range(1, numGroups+1):
        probsExp.append(probs[i] - probs[i-1])
    # print(probsExp)
    expectedValues = np.array(probsExp)*len(generatedValues)

    return observedValues, expectedValues, numGroups


def pearsonTest(observedValues, expectedValues, numGroups):
    """
    The function takes in the observed values, expected values, and the number of groups. It then
    calculates the chi-squared statistic and the p-value

    :param observedValues: the observed values of the data
    :param expectedValues: the expected values for each group
    :param numGroups: the number of groups you're comparing
    """
    est_chi = 0

    for k in range(numGroups):
        est_chi = est_chi + ((observedValues[k] - expectedValues[k])**2)/expectedValues[k]

    result = stat2.chisquare(observedValues, expectedValues, numGroups - 1, axis=None)
    print(result.statistic)
    print(est_chi)
    print(stat2.chi2.cdf(est_chi, numGroups - 1))
    print(stat2.chi2.cdf(result.statistic, numGroups - 1))
