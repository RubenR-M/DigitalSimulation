from cmath import exp
import numpy as np
from math import log
import scipy.stats as stat2


def normal(paremetrer=[], bins=[]):
    return stat2.norm.cdf(bins)


def EXPONENTIAL(lmbda, bins):
    return 1 - np.exp(-lmbda[0]*bins)


def logisticCDF(parameters, bins):
    """
    The logistic CDF is the cumulative distribution function of the logistic distribution

    :param parameters: [mu, sigma]
    :param bins: the x-axis of the histogram
    :return: The logistic CDF is being returned.
    """

    num = np.exp(-(bins-parameters[0])/parameters[1])
    cdf = 1/(1 + num)

    return cdf


def generateObservedExpectedValues(generatedValues, functionName, functionParameters=[]):
    """
    It takes a list of generated values, a function name, and a list of parameters for that function,
    and returns the observed values, expected values, and number of groups

    :param generatedValues: the values generated by the random number generator
    :param functionName: the name of the function that generates the random numbers
    :param functionParameters: the parameters of the distribution function
    :return: The observed values, expected values, and the number of groups.
    """

    numGroups = round(1 + log(len(generatedValues))/log(2))
    maxValue = max(generatedValues)

    observedValues, bins = np.histogram(generatedValues, bins=numGroups)
    # print(numGroups, observedValues, bins)

    probs = functionName(functionParameters, bins)
    # print(probs)
    probsExp = []

    for i in range(1, numGroups+1):
        probsExp.append(probs[i] - probs[i-1])
    # print(probsExp)
    expectedValues = np.array(probsExp)*len(generatedValues)

    return observedValues, expectedValues, numGroups


def pearsonTest(observedValues, expectedValues, numGroups, numParameters):
    est_chi = 0

    for k in range(numGroups):
        est_chi = est_chi + ((observedValues[k] - expectedValues[k])**2)/expectedValues[k]

    result = stat2.chisquare(observedValues, expectedValues, numGroups - numParameters, axis=None)
    print("result: ", result.statistic)
    print("est_chi", est_chi)
    print("chi2cdf: ", stat2.chi2.cdf(est_chi, numGroups - numParameters))
    print("chi2cdf.result: ", stat2.chi2.cdf(result.statistic, numGroups - numParameters))

    return stat2.chi2.cdf(result.statistic, numGroups - numParameters)
